using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Net;
using System.Windows.Forms;
using Ionic.Zip;
using System.IO;
using System.Reflection;

namespace Minecraft_Launcher_by_Gaius_v2
{
    public partial class Launcher : Form
    {
        public static Dictionary<string, string> Settings = new Dictionary<string, string>();
        public static string pathDirGaius = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

        public Launcher()
        {
            InitializeComponent();
            Log("Inicjalizacja programu...");
        }



        private void Launcher_Load(object sender, EventArgs e)
        {
            string tempAppData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            Settings.Add("pathDirAppdata", tempAppData);
            Settings.Add("pathDirGaius", tempAppData + "\\.gaius");
            Settings.Add("pathDirMinecraft", tempAppData + "\\.minecraft");
            Settings.Add("versionCurrent", new WebClient().DownloadString("http://mcpl.eu/launcher/version"));

            Dictionary<string, bool> Checked = Check();

            if (!Checked["gaius"])
            {
                CheckGaiusFull();
                if (!Checked["assets"])
                {
                    Log("Nie znalazłem plików .minecraft. Pobieram...");

                    DownloadAssets(() =>
                    {
                        Log("Pobrałem.");
                        Log("Rozpakowuję...");
                        UnzipFile(Settings["pathDirGaius"] + "\\temp\\assets.zip", Settings["pathDirGaius"] + "\\assets", (sendera, era) => { pbarMain.Value = era.ProgressPercentage; }, (senderi, eri) =>
                        {
                            Log("Rozpakowałem");
                            pbarMain.Value = 0;
                            Settings.Add("pathAssets", Settings["pathDirGaius"] + "\\assets");
                            Unlock(Ready());
                        });
                    });
                }
                else
                {
                    Settings.Add("pathAssets", Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft\\assets");
                    Unlock(Ready());
                }


            }
            else
            {
                if (!Checked["assets"])
                {
                    Log("Nie znalazłem plików .minecraft. Pobieram...");

                    DownloadAssets(() =>
                    {
                        Log("Pobrałem.");
                        Log("Rozpakowuję...");
                        UnzipFile(Settings["pathDirGaius"] + "\\temp\\assets.zip", Settings["pathDirGaius"] + "\\assets", (sendera, era) => { pbarMain.Value = era.ProgressPercentage; }, (senderi, eri) =>
                        {
                            Log("Rozpakowałem");
                            pbarMain.Value = 0;
                            Settings.Add("pathAssets", Settings["pathDirGaius"] + "\\assets");
                            Unlock(Ready());
                        });
                    });
                }
                else
                {
                    Settings.Add("pathAssets", Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft\\assets");
                    Unlock(Ready());

                }

            }


        }

        public void Unlock(bool unlock)
        {
            if (unlock)
            {

                textBox1.Enabled = true;

            }
            else
            {
                textBox1.Enabled = false;
            }
        }

        public bool Ready()
        {
            CheckVersions();
            if (comboBox1.Items.Contains(Settings["versionCurrent"]))
            {
                Settings.Add("versionLocal", Settings["versionCurrent"]);
            }
            else
            {
                if (comboBox1.Items.Count > 0)
                {
                    Settings.Add("versionLocal", (string)comboBox1.SelectedItem);
                }
                else
                {
                    Helper("Nie znaleziono żadnego pliku JAR! Pobieram ostatnią wersję...", true);

                    DownloadLast(() =>
                    {
                        Log("Pobrano.");
                        Log("Rozpakowuję najnowszą wersję...");
                        Helper("Przygotowuję pliki...");
                        UnzipFile(Settings["pathDirGaius"] + "\\temp\\temp.zip", Settings["pathDirGaius"] + "\\temp", (sendere, ere) => { pbarMain.Value = ere.ProgressPercentage; }, (sendere, ere) =>
                        {
                            pbarMain.Value = 0;
                            Log("Rozpakowano.");
                            CopyDir(Settings["pathDirGaius"] + "\\temp\\lib", Settings["pathDirGaius"] + "\\lib");
                            File.Move(Settings["pathDirGaius"] + "\\temp\\" + Settings["versionCurrent"] + ".jar", Settings["pathDirGaius"] + "\\jar\\" + Settings["versionCurrent"] + ".jar");
                            File.Move(Settings["pathDirGaius"] + "\\temp\\" + Settings["versionCurrent"] + ".txt", Settings["pathDirGaius"] + "\\jar\\" + Settings["versionCurrent"] + ".txt");
                            new FileInfo(Settings["pathDirGaius"] + "\\temp\\temp.zip").Delete();
                            new DirectoryInfo(Settings["pathDirGaius"] + "\\temp\\lib").Delete(true);
                            Log("Przeniesiono i wyczyszczono.");
                            Helper("Gotowe.");
                            Unlock(Ready());
                        });
                    });
                    return false;
                }
            }



            return true;
        }




        private void CheckVersions()
        {
            DirectoryInfo dirVersions = new DirectoryInfo(Settings["pathDirGaius"] + "\\jar");
            FileInfo[] fileList = dirVersions.GetFiles();
            List<string> versionList = new List<string>();
            foreach (FileInfo fi in fileList)
            {
                if (fi.Extension == ".jar")
                {
                    if (File.Exists(Settings["pathDirGaius"] + "\\jar\\" + fi.Name.Replace(".jar", ".txt")))
                    {
                        versionList.Add(fi.Name);
                    }
                }
            }
            comboBox1.Items.Clear();
            comboBox1.Items.AddRange(versionList.ToArray());
        }

        private void CheckGaiusFull()
        {
            Log("Pierwsze uruchomienie...");
            Create();
            pbarMain.Value = 0; Log("Tworzę katalogi.");
            Log("Pobieram biblioteki...");
            DownloadNatives(() =>
            {
                Log("Pobrano.");
                Log("Rozpakowuję biblioteki...");
                pbarMain.Value = 0;
                UnzipFile(Settings["pathDirGaius"] + "\\temp\\natives.zip", Settings["pathDirGaius"] + "\\bin", (sendera, era) => { pbarMain.Value = era.ProgressPercentage; }, (senderi, eri) =>
                {
                    pbarMain.Value = 0;
                    Log("Rozpakowano.");
                    new FileInfo(Settings["pathDirGaius"] + "\\temp\\natives.zip").Delete();
                    Log("Pobieram najnowszą wersję (" + Settings["versionCurrent"] + ")...");
                    DownloadLast(() =>
                    {
                        Log("Pobrano.");
                        Log("Rozpakowuję najnowszą wersję...");
                        UnzipFile(Settings["pathDirGaius"] + "\\temp\\temp.zip", Settings["pathDirGaius"] + "\\temp", (sendere, ere) => { pbarMain.Value = ere.ProgressPercentage; }, (sendere, ere) =>
                        {
                            pbarMain.Value = 0;
                            Log("Rozpakowano.");
                            CopyDir(Settings["pathDirGaius"] + "\\temp\\lib", Settings["pathDirGaius"] + "\\lib");
                            File.Move(Settings["pathDirGaius"] + "\\temp\\" + Settings["versionCurrent"] + ".jar", Settings["pathDirGaius"] + "\\jar\\" + Settings["versionCurrent"] + ".jar");
                            File.Move(Settings["pathDirGaius"] + "\\temp\\" + Settings["versionCurrent"] + ".txt", Settings["pathDirGaius"] + "\\jar\\" + Settings["versionCurrent"] + ".txt");
                            new FileInfo(Settings["pathDirGaius"] + "\\temp\\temp.zip").Delete();
                            new DirectoryInfo(Settings["pathDirGaius"] + "\\temp\\lib").Delete(true);
                            Log("Przeniesiono i wyczyszczono.");
                        });
                    });
                });
            });

        }

        private void LaunchMinecraft(string nick, string options, string jar)
        {

            List<string> librariesPathList = new List<string>();
            string[] librariesList = File.ReadAllLines(Settings["pathDirGaius"] + "\\jar\\" + jar + ".txt");
            foreach (string library in librariesList)
            {
                librariesPathList.Add(Settings["pathDirGaius"] + "\\lib\\" + library);
            }
            string makeLibraryString = string.Join(";", librariesPathList);
            makeLibraryString += ";" + Settings["pathDirGaius"] + "\\jar\\" + jar + ".jar";


            Log(makeLibraryString);


            string psi = string.Format(@"{0} -Djava.library.path={1}\bin -cp {2} net.minecraft.client.main.Main --username {3} --session {4} --version 1.6.1 --gameDir {5} --assetsDir {6}",
                options, //EXECUTE OPTIONS
                Settings["pathDirGaius"], //NATIVES FOLDER
                makeLibraryString, //LIBRARY STRING
                nick, //NICK
                "7ae9007b9909de05ea58e94199a33b30c310c69c", //SSID
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft", //GAMEDIR
                Settings["pathAssets"]); //ASSETSDIR
            Log("Odpalam minecrafta: " + psi);
            System.Diagnostics.ProcessStartInfo pinfo;
            string uruchom = "java";
            if (!checkBox2.Checked) uruchom += "w";
            pinfo = new System.Diagnostics.ProcessStartInfo("javaw", psi);
            System.Diagnostics.Process.Start(pinfo);
            if (checkBox4.Checked) Environment.Exit(0);
        }


        public Dictionary<string, bool> Check()
        {
            Dictionary<string, bool> Result = new Dictionary<string, bool>();
            if (Directory.Exists(Settings["pathDirMinecraft"]))
            {
                Result.Add("minecraft", true);
                if (Directory.Exists(Settings["pathDirMinecraft"] + "\\assets")) Result.Add("assets", true);
                else Result.Add("assets", false);
            }
            else
            {
                Result.Add("minecraft", false);
                Result.Add("assets", false);
            }

            if (Directory.Exists(Settings["pathDirGaius"]))
            {
                Result.Add("gaius", true);
                if (File.Exists(Settings["pathDirGaius"] + "\\version")) Result.Add("version", true);
                else Result.Add("version", false);

                if (Directory.Exists(Settings["pathDirGaius"] + "\\libraries")) Result.Add("libraries", true);
                else Result.Add("libraries", false);

                if (Directory.Exists(Settings["pathDirGaius"] + "\\libraries\\natives")) Result.Add("natives", true);
                else Result.Add("natives", false);
            }
            else
            {
                Result.Add("gaius", false);
                Result.Add("version", false);
                Result.Add("libraries", false);
                Result.Add("natives", false);
            }
            return Result;
        }

        public void Initialize()
        {
            Directory.CreateDirectory(Settings["pathDirGaius"]);
            Directory.CreateDirectory(Settings["pathDirGaius"] + "\\lib");
            Directory.CreateDirectory(Settings["pathDirGaius"] + "\\bin");
            Directory.CreateDirectory(Settings["pathDirGaius"] + "\\temp");
            Directory.CreateDirectory(Settings["pathDirGaius"] + "\\jar");
            Directory.CreateDirectory(Settings["pathDirGaius"] + "\\assets");
        }

        public void DownloadAssets(Action callback)
        {
            DownloadFile("http://mcpl.eu/launcher/assets.zip", Settings["pathDirGaius"] + "\\temp\\assets.zip", (sender, e) => { pbarMain.Value = e.ProgressPercentage; }, (sender, e) =>
            {
                pbarMain.Value = 0;
                if (callback != null) callback();
            });
        }

        public void DownloadNatives(Action callback)
        {
            DownloadFile("http://mcpl.eu/launcher/natives.zip", Settings["pathDirGaius"] + "\\temp\\natives.zip", (sender, e) => { pbarMain.Value = e.ProgressPercentage; }, (sender, e) =>
            {
                pbarMain.Value = 0;
                if (callback != null) callback();
            });
        }

        public void DownloadLast(Action callback)
        {
            DownloadFile("http://mcpl.eu/launcher/_" + Settings["versionCurrent"] + ".zip", Settings["pathDirGaius"] + "\\temp\\temp.zip", (sender, e) => { pbarMain.Value = e.ProgressPercentage; }, (sender, e) =>
            {
                pbarMain.Value = 0;
                if (callback != null) callback();
            });
        }


        private void CopyDir(string SourcePath, string DestinationPath)
        {
            foreach (string dirPath in Directory.GetDirectories(SourcePath, "*", SearchOption.AllDirectories))
                Directory.CreateDirectory(dirPath.Replace(SourcePath, DestinationPath));


            foreach (string newPath in Directory.GetFiles(SourcePath, "*.*", SearchOption.AllDirectories))
                File.Copy(newPath, newPath.Replace(SourcePath, DestinationPath), true);
        }

        private bool UnzipFile(string zip, string path, ProgressChangedEventHandler progress, RunWorkerCompletedEventHandler completed)
        {
            if (File.Exists(zip) && Directory.Exists(Path.GetDirectoryName(path)))
            {
                BackgroundWorker bw = new BackgroundWorker();
                bw.WorkerReportsProgress = true;
                bw.WorkerSupportsCancellation = false;

                bw.DoWork += (sender, e) =>
                {
                    string zipToUnpack = zip;
                    string unpackDirectory = path;
                    using (ZipFile zip1 = ZipFile.Read(zipToUnpack))
                    {
                        double counter = 0;
                        double count = zip1.Count;
                        foreach (ZipEntry entry in zip1)
                        {
                            counter++;
                            entry.Extract(unpackDirectory, ExtractExistingFileAction.OverwriteSilently);
                            bw.ReportProgress((int)(counter / count * 100));
                        }
                    }
                };

                bw.ProgressChanged += progress;
                bw.RunWorkerCompleted += completed;
                bw.RunWorkerAsync();
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool DownloadFile(string url, string path, DownloadProgressChangedEventHandler progress, AsyncCompletedEventHandler completed)
        {
            if (UrlExists(url) && Directory.Exists(Path.GetDirectoryName(path)))
            {
                WebClient webClient = new WebClient();
                webClient.DownloadFileCompleted += new AsyncCompletedEventHandler(completed);
                webClient.DownloadProgressChanged += new DownloadProgressChangedEventHandler(progress);
                webClient.DownloadFileAsync(new Uri(url), path);
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool UrlExists(string url)
        {
            HttpWebResponse response = null;
            var request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "HEAD";
            try
            {
                response = (HttpWebResponse)request.GetResponse();
                response.Close();
                return true;
            }
            catch (WebException ex)
            {
                response.Close();
            }
            return false;
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            tabControl1.Visible = checkBox1.Checked;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string nick1 = textBox1.Text.Replace(" ", "");
            if (nick1 != "")
            {
                LaunchMinecraft(nick1, "", Settings["versionLocal"].Remove(Settings["versionLocal"].Length - 4));
            }
            else
            {
                Helper("Wpisz prawidłowy nick!", true);
            }
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            Settings["versionLocal"] = (string)comboBox1.SelectedItem;
        }

        private void Helper(string text, bool error = false)
        {
            if (error)
            {
                label1.ForeColor = Color.Red;
            }
            else
            {
                label1.ForeColor = Color.Black;
            }
            label1.Text = text;
        }

        private void Log(string text)
        {
            richTextBox1.AppendText(" > " + text + "\n");
            richTextBox1.SelectionStart = richTextBox1.Text.Length;
            richTextBox1.ScrollToCaret();
        }
    }
    public static class ALE
    {
        public static string DictToString<T, V>(IEnumerable<KeyValuePair<T, V>> items)
        {
            return String.Join(";", items.Select(x => x.Key.ToString() + "=" + x.Value.ToString()).ToArray());
        }
    }
}
