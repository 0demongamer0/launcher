using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Net;
using System.IO;
using System.Windows.Forms;
using Ionic.Zip;

namespace Minecraft_Launcher_by_Gaius
{
    public partial class Form1 : Form
    {
        public static string currentMcVersion = new WebClient().DownloadString("http://mcpl.eu/launcher/version");
        
       
        public static string librariesOldString = @"{0}\libraries\net\sf\jopt-simple\jopt-simple\4.5\jopt-simple-4.5.jar;{0}\libraries\com\paulscode\codecjorbis\20101023\codecjorbis-20101023.jar;{0}\libraries\com\paulscode\codecwav\20101023\codecwav-20101023.jar;{0}\libraries\com\paulscode\libraryjavasound\20101123\libraryjavasound-20101123.jar;{0}\libraries\com\paulscode\librarylwjglopenal\20100824\librarylwjglopenal-20100824.jar;{0}\libraries\com\paulscode\soundsystem\20120107\soundsystem-20120107.jar;{0}\libraries\org\lwjgl\lwjgl\lwjgl\2.9.0\lwjgl-2.9.0.jar;{0}\libraries\org\lwjgl\lwjgl\lwjgl_util\2.9.0\lwjgl_util-2.9.0.jar;{0}\libraries\argo\argo\2.25_fixed\argo-2.25_fixed.jar;{0}\libraries\org\bouncycastle\bcprov-jdk15on\1.47\bcprov-jdk15on-1.47.jar;{0}\libraries\com\google\guava\guava\14.0\guava-14.0.jar;{0}\libraries\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;{0}\libraries\commons-io\commons-io\2.4\commons-io-2.4.jar;{0}\libraries\net\java\jinput\jinput\2.0.5\jinput-2.0.5.jar;{0}\libraries\net\java\jutils\jutils\1.0.0\jutils-1.0.0.jar;{0}\libraries\com\google\code\gson\gson\2.2.2\gson-2.2.2.jar;{0}\versions\{1}\{1}.jar";

        
        public static string[] librariesList = { 
                                        "jopt-simple-4.5.jar",
                                        "codecjorbis-20101023.jar",
                                        "codecwav-20101023.jar",
                                        "libraryjavasound-20101123.jar",
                                        "librarylwjglopenal-20100824.jar",
                                        "soundsystem-20120107.jar",
                                        "lwjgl-2.9.0.jar",
                                        "lwjgl_util-2.9.0.jar",
                                        "argo-2.25_fixed.jar",
                                        "bcprov-jdk15on-1.47.jar",
                                        "guava-14.0.jar",
                                        "commons-lang3-3.1.jar",
                                        "commons-io-2.4.jar",
                                        "jinput-2.0.5.jar",
                                        "jutils-1.0.0.jar",
                                        "gson-2.2.2.jar"
                                        };
        public static string[] nativesJarList = { 
                                                "jinput-platform-2.0.5-natives-windows.jar",
                                                "lwjgl-platform-2.9.0-natives-windows.jar"
                                                };
        public static string[] nativesList = { 
                                      "jinput-dx8.dll",
                                      "jinput-dx8_64.dll",
                                      "jinput-raw_64.dll",
                                      "jinput-raw.dll",
                                      "jinput-wintab.dll",
                                      "lwjgl.dll",
                                      "lwjgl64.dll",
                                      "OpenAL32.dll",
                                      "OpenAL64.dll"
                                      };

        public static string minecraftFolderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\.minecraft";
        public static string gaiusLauncherDir = minecraftFolderPath + @"\gaius";
        public static string executeMcFrom = minecraftFolderPath;
        public static string localMcVersion;
        public static bool showConsole = false;

        public Form1()
        {
            InitializeComponent();
            Log("Inicjalizacja okna...");
        }

        private void Log(string text)
        {
            richTextBox1.Text = richTextBox1.Text + "\r\n" + text;
            richTextBox1.SelectionStart = richTextBox1.Text.Length;
            richTextBox1.ScrollToCaret();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Log("gaiusLauncherDir: "+gaiusLauncherDir);
            Log("currentMcVersion: " + currentMcVersion);
            Log("checkForGaiusFolder(): " + CheckForGaiusFolder());
            
            if (!CheckForGaiusFolder())
            {
                Lock();
                label2.Text = "Nie wykryto folderu launchera. Pobieram potrzebne pliki...";
                Directory.CreateDirectory(gaiusLauncherDir);
                Directory.CreateDirectory(gaiusLauncherDir + @"\libraries");
                File.WriteAllText(gaiusLauncherDir + @"\version", currentMcVersion);
                localMcVersion = File.ReadAllText(gaiusLauncherDir + "\\version");
                label6.Text = localMcVersion;
                DownloadFile("http://minecraftpolska.eu/launcher/" + currentMcVersion + ".zip", gaiusLauncherDir + "\\" + currentMcVersion + ".zip", DownloadNativesCompleted, DownloadNativesProgress);
            }
            else
            {
                localMcVersion = File.ReadAllText(gaiusLauncherDir + "\\version");
                label6.Text = localMcVersion;
                if (File.Exists(gaiusLauncherDir + "\\lastlogin"))
                {
                    textBox1.Text = File.ReadAllText(gaiusLauncherDir + "\\lastlogin");
                }
                Log("Znaleziono folder launchera.");
                if (currentMcVersion != localMcVersion)
                {
                    Log("Znaleziono nową wersję Minecrafta!");
                    if(MessageBox.Show("Znaleziono nową wersję Minecrafta ("+currentMcVersion+"). Chcesz zaktualizować?","Aktualizacja",MessageBoxButtons.YesNo,MessageBoxIcon.Question)==DialogResult.Yes) {
                        Log("Tutaj będzie aktualizować...");

                        /*
                         * 
                         * 
                         * 
                         * AKTUALIZACJA MINECRAFTA TUTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ
                         * 
                         * 
                         */
                    }
                }
            }

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            if (textBox1.Text.Replace(" ", "") != "")
            {
                button1.Enabled = true;
            }
            else
            {
                button1.Enabled = false;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (textBox1.Text.Replace(" ", "") != " ")
            {
                Log("Próbuję odpalić minecrafta...");
                LaunchMinecraft(textBox1.Text.Replace(" ", ""), textBox2.Text);
                File.WriteAllText(gaiusLauncherDir + "\\lastlogin", textBox1.Text.Replace(" ", ""));
                File.WriteAllText(Directory.GetCurrentDirectory() + "\\log.txt", richTextBox1.Text);
                Environment.Exit(1);
            }
        }

        private bool CheckForGaiusFolder()
        {
            return Directory.Exists(gaiusLauncherDir) ? true : false;
        }

        private void LaunchMinecraft(string nick, string options)
        {
            
            List<string> librariesPathList = new List<string>();
            foreach (string library in librariesList)
            {
                librariesPathList.Add(gaiusLauncherDir+"\\libraries\\"+library);
            }
            string makeLibraryString = string.Join(";", librariesPathList);
            makeLibraryString += ";"+gaiusLauncherDir + "\\libraries\\versions\\" + localMcVersion + ".jar";
            Log(makeLibraryString);
            string psi = string.Format(@"{0} -Djava.library.path={1}\libraries\natives -cp {2} net.minecraft.client.main.Main --username {3} --session {4} --version 1.6.1 --gameDir {6} --assetsDir {5}\assets",
                options,
                gaiusLauncherDir,
                makeLibraryString,
                nick,
                "7ae9007b9909de05ea58e94199a33b30c310c69c",
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft",
                executeMcFrom);
            Log("Odpalam minecrafta: "+psi);
            System.Diagnostics.ProcessStartInfo pinfo;
            if(showConsole) pinfo = new System.Diagnostics.ProcessStartInfo("java", psi);
            else pinfo = new System.Diagnostics.ProcessStartInfo("javaw", psi);
            System.Diagnostics.Process.Start(pinfo);           
        }

        private void DownloadFile(string url, string path, AsyncCompletedEventHandler completed, DownloadProgressChangedEventHandler progress)
        {
            WebClient webClient = new WebClient();
            webClient.DownloadFileCompleted += new AsyncCompletedEventHandler(completed);
            webClient.DownloadProgressChanged += new DownloadProgressChangedEventHandler(progress);
            webClient.DownloadFileAsync(new Uri(url), path);
        }

        private void DownloadNativesProgress(object sender, DownloadProgressChangedEventArgs e)
        {
            progressBar1.Value = e.ProgressPercentage;
        }

        private void DownloadNativesCompleted(object sender, AsyncCompletedEventArgs e)
        {
            progressBar1.Value = 0;
            label2.Text = "Pobrano aktualną paczkę z serwera! Rozpakowywuję...";
            Log("Pobrano paczkę libraries.");
            workerUnpackVersion.RunWorkerAsync();
        }

        private void workerUnpackVersion_DoWork(object sender, DoWorkEventArgs e)
        {
            string zip = gaiusLauncherDir+"\\"+currentMcVersion+".zip";
            string path = gaiusLauncherDir + "\\";
            using (ZipFile zip1 = ZipFile.Read(zip))
            {
                double counter = 0;
                double count = (double)zip1.Count;
                foreach (ZipEntry entry in zip1)
                {
                    counter++;
                    entry.Extract(path, ExtractExistingFileAction.OverwriteSilently);
                    workerUnpackVersion.ReportProgress((int)(counter/count*100));
                }
            }
        }

        private void workerUnpackVersion_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressBar1.Value = e.ProgressPercentage;
            Log("Rozpakowuję... "+e.ProgressPercentage.ToString());
        }

        private void workerUnpackVersion_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            progressBar1.Value = 0;
            label2.Text = "Rozpakowano! Przygotowuję pliki natives...";
            Log("Rozpakowano paczkę libraries.");
            FileInfo zipDel = new FileInfo(gaiusLauncherDir+"\\libraries\\"+currentMcVersion+".zip");
            zipDel.Delete();
            workerUnpackNatives.RunWorkerAsync();
        }

        private void Lock()
        {
            textBox1.Enabled = false;
            button1.Enabled = false;
        }

        private void Unlock()
        {
            textBox1.Enabled = true;
            button1.Enabled = true;
        }

        private void workerUnpackNatives_DoWork(object sender, DoWorkEventArgs e)
        {
            string zip = gaiusLauncherDir + "\\libraries\\natives\\" + nativesJarList[0];
            string path = gaiusLauncherDir + "\\libraries\\natives";
            using (ZipFile zip1 = ZipFile.Read(zip))
            {
                double counter = 0;
                double count = (double)zip1.Count;
                foreach (ZipEntry entry in zip1)
                {
                    counter++;
                    entry.Extract(path, ExtractExistingFileAction.OverwriteSilently);
                    workerUnpackNatives.ReportProgress((int)(counter / count * 50));
                }
            }

            string zip2 = gaiusLauncherDir + "\\libraries\\natives\\" + nativesJarList[1];
            string path2 = gaiusLauncherDir + "\\libraries\\natives";
            using (ZipFile zip3 = ZipFile.Read(zip2))
            {
                double counter = 0;
                double count = (double)zip3.Count;
                foreach (ZipEntry entry in zip3)
                {
                    counter++;
                    entry.Extract(path2, ExtractExistingFileAction.OverwriteSilently);
                    workerUnpackNatives.ReportProgress((int)((counter / count * 50) + 50));
                }
            }
        }

        private void workerUnpackNatives_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            progressBar1.Value = e.ProgressPercentage;
            Log("Rozpakowuję natives... " +e.ProgressPercentage.ToString());
        }

        private void workerUnpackNatives_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            progressBar1.Value = 0;
            label2.Text = "Gotowe! Możesz już odpalać MC :)";
            Log("MC przygotowany.");
            FileInfo oldNative1 = new FileInfo(gaiusLauncherDir + "\\libraries\\natives\\" + nativesJarList[0]);
            FileInfo oldNative2 = new FileInfo(gaiusLauncherDir + "\\libraries\\natives\\" + nativesJarList[1]);
            oldNative1.Delete();
            oldNative2.Delete();

            Unlock();
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

            if (checkBox1.Checked)
            {
                if (MessageBox.Show("Jesteś tego pewien? Klikając tak, zrzekasz się praw do wnoszenia reklamacji i/lub narzekania!", "Pytanie", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    textBox2.Enabled = false;
                    checkBox1.Checked = false;
                    checkBox2.Enabled = false;
                    button2.Enabled = false;
                }
                else
                {
                    textBox2.Enabled = true;
                    checkBox2.Enabled = true;
                    button2.Enabled = true;
                }
               
            }
            else
            {
                textBox2.Enabled = false;
                checkBox2.Enabled = false;
                button2.Enabled = false;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            File.WriteAllText(Directory.GetCurrentDirectory()+"\\log.txt",richTextBox1.Text);
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox2.Checked)
            {
                showConsole = true;
            }
            else
            {
                showConsole = false;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (minecraftFolder.ShowDialog() == DialogResult.OK)
            {
                executeMcFrom = minecraftFolder.SelectedPath;
                textBox3.Text = minecraftFolder.SelectedPath;
            }
        }

        static public bool URLExists(string url)
        {
            bool result = true;

            WebRequest webRequest = WebRequest.Create(url);
            webRequest.Timeout = 1200; // miliseconds
            webRequest.Method = "HEAD";

            try
            {
                webRequest.GetResponse();
            }
            catch
            {
                result = false;
            }
            return result;
        }
    }
}











javaw 
-Djava.library.path=C:\Users\Administrator\AppData\Roaming\.gaius\libraries\natives
 -cp C:\Users\Administrator\AppData\Roaming\.gaius\lib\jopt-simple-4.5.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\codecjorbis-20101023.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\codecwav-20101023.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\libraryjavasound-20101123.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\librarylwjglopenal-20100824.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\soundsystem-20120107.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\lwjgl-2.9.0.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\lwjgl_util-2.9.0.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\argo-2.25_fixed.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\bcprov-jdk15on-1.47.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\guava-14.0.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\commons-lang3-3.1.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\commons-io-2.4.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\jinput-2.0.5.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\jutils-1.0.0.jar;C:\Users\Administrator\AppData\Roaming\.gaius\lib\gson-2.2.2.jar;C:\Users\Administrator\AppData\Roaming\.gaius\jar\1.6.1.jar net.minecraft.client.main.Main --username Gaius --session 7ae9007b9909de05ea58e94199a33b30c310c69c --version 1.6.1 --gameDir C:\Users\Administrator\AppData\Roaming\.minecraft --assetsDir C:\Users\Administrator\AppData\Roaming\.minecraft\assets


jopt-simple-4.5.jar
codecjorbis-20101023.jar
codecwav-20101023.jar
libraryjavasound-20101123.jar
librarylwjglopenal-20100824.jar
soundsystem-20120107.jar
lwjgl-2.9.0.jar
lwjgl_util-2.9.0.jar
argo-2.25_fixed.jar
bcprov-jdk15on-1.47.jar
guava-14.0.jar
commons-lang3-3.1.jar
commons-io-2.4.jar
jinput-2.0.5.jar
jutils-1.0.0.jar
gson-2.2.2.jar














                    DownloadLast(() =>
                    {
                        Log("Pobrano.");
                        Log("Rozpakowuję najnowszą wersję...");
                        UnzipFile(pathDirGaius + "\\temp\\temp.zip", pathDirGaius + "\\temp", (sendere, ere) => { pbarMain.Value = ere.ProgressPercentage; }, (sendere, ere) =>
                        {
                            pbarMain.Value = 0;
                            Log("Rozpakowano.");
                            CopyDir(pathDirGaius + "\\temp\\lib", pathDirGaius + "\\lib");
                            File.Move(pathDirGaius + "\\temp\\" + Settings["versionCurrent"] + ".jar", pathDirGaius + "\\jar\\" + Settings["versionCurrent"] + ".jar");
                            File.Move(pathDirGaius + "\\temp\\" + Settings["versionCurrent"] + ".txt", pathDirGaius + "\\jar\\" + Settings["versionCurrent"] + ".txt");
                            new FileInfo(pathDirGaius + "\\temp\\temp.zip").Delete();
                            new DirectoryInfo(pathDirGaius + "\\temp\\lib").Delete(true);
                            Log("Przeniesiono i wyczyszczono.");
                        });
                    });